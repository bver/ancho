// ancho.idl : IDL source for ancho
//

// This file will be processed by the MIDL tool to
// produce the type library (ancho.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "exdisp.idl";

[
	uuid(DBBBF00D-3AB6-45BA-BE51-B5D8EFECD127),
	version(1.0),
	helpstring("ancho 1.0 Type Library")
]
library anchoLib
{
	importlib("stdole2.tlb");
  importlib("AnchoBgSrv.tlb");

  [
	  object,
	  uuid(2E63BFC0-E51B-4317-A814-601A606E7C4C),
	  nonextensible,
	  helpstring("IAnchoAddon Interface"),
	  pointer_default(unique)
  ]
  interface IAnchoAddon : IUnknown
  {
    HRESULT Init([in] LPCOLESTR lpsExtensionID, [in] IAnchoAddonService * pService, [in] IWebBrowser2 * pWebBrowser);
    HRESULT ApplyContentScripts([in] IWebBrowser2 * pWebBrowser, [in] BSTR bstrUrl, [in] BSTR bstrPhase);
    HRESULT Shutdown();

    HRESULT executeScriptCode(BSTR aCode);
    HRESULT executeScriptFile(BSTR aFile);
  };

  [
	  object,
	  uuid(AEBCA26A-1917-11E2-845E-E50E6188709B),
	  dual,
	  nonextensible,
	  helpstring("DAnchoBrowserEvents Interface"),
	  pointer_default(unique)
  ]
  interface DAnchoBrowserEvents : IDispatch
  {
    [id(1)] HRESULT OnFrameStart([in] BSTR bstrUrl, [in] VARIANT_BOOL bIsMainFrame);
    [id(2)] HRESULT OnFrameEnd([in] BSTR bstrUrl, [in] VARIANT_BOOL IsMainFrame);
    [id(3)] HRESULT OnFrameRedirect([in] BSTR bstrOldUrl, [in] BSTR bstrNewUrl);
  };

  [
		uuid(BC66BD3D-2AB6-4672-8EF3-DB2BD089CD60),
		helpstring("AnchoRuntime Class")
	]
	coclass AnchoRuntime
	{
		[default] interface IAnchoRuntime;
	};
};
