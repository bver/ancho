/****************************************************************************
 * AnchoBgSrv.idl : IDL source for Ancho background service
 * Copyright 2012 Salsita software (http://www.salsitasoft.com).
 * Author: Arne Seib <kontakt@seiberspace.de>
 ****************************************************************************/

import "oaidl.idl";
import "ocidl.idl";

// forwards
interface IAnchoAddonBackground;
interface IAnchoRuntime;

/*==========================================================================*/
[
	object,
	uuid(DA08F068-BA41-431A-94BB-5EB3C46767A2),
	oleautomation,
	nonextensible,
	helpstring("IAnchoAddonService Interface"),
	pointer_default(unique)
]
interface IAnchoAddonService : IUnknown
{
  HRESULT GetAddonBackground([in] BSTR bsID, [out, retval] IAnchoAddonBackground ** ppRet);
  HRESULT GetModulePath([out, retval] BSTR * pbsPath);

  HRESULT registerRuntime([in] IAnchoRuntime * aRuntime, [out, retval] INT *aTabID);
  HRESULT unregisterRuntime([in] INT aTabID);
  HRESULT createTabNotification([in] INT aTabID, [in] INT aRequestID);
  HRESULT invokeEventObjectInAllExtensions([in] BSTR aEventName, [in] LPDISPATCH aArgs);

  HRESULT webBrowserReady();
};




/*==========================================================================*/
[
  object,
  uuid(921C5C5B-3353-42d1-B9D3-BE7FFA912F2A),
  oleautomation,
  nonextensible,
  helpstring("IAnchoAddonBackground Interface"),
  pointer_default(unique)
]
interface IAnchoAddonBackground : IUnknown
{
  HRESULT AdviseInstance([out, retval] ULONG * pInstanceID);
  HRESULT UnadviseInstance([in] ULONG ulInstanceID);
  HRESULT GetContentAPI([in] ULONG ulInstanceID, [out, retval] LPDISPATCH* ppDisp);
//  HRESULT GetManifest([out, retval] LPDISPATCH* ppDisp);
};

/*==========================================================================*/
[
	uuid(E010DD54-F388-4292-9BAE-C962B22F17BD),
	version(1.0),
	helpstring("AnchoBgSrv 1.0 Type Library")
]
library AnchoBgSrvLib
{
	importlib("stdole2.tlb");
  [
	  object,
	  uuid(06550FFB-49D7-4428-A5FF-2CC688A8001F),
	  oleautomation,
	  nonextensible,
	  helpstring("IAnchoRuntime Interface"),
	  pointer_default(unique)
  ]
  interface IAnchoRuntime : IUnknown
  {
    HRESULT reloadTab();
    HRESULT closeTab();
    HRESULT executeScript([in] BSTR aExtensionId, [in] BSTR aCode, [in] INT aFileSpecified);
    HRESULT updateTab([in] LPDISPATCH aProperties);
    HRESULT fillTabInfo([in] VARIANT* aInfo);
  };

  /*==========================================================================*/
  [
    object,
    uuid(3442CFB9-7E99-4509-B9E1-854CCD317562),
    dual,
    oleautomation,
    nonextensible,
    helpstring("IAnchoServiceApi Interface"),
    pointer_default(unique)
  ]
  interface IAnchoServiceApi : IDispatch
  {
    [propget, id(1)]
    HRESULT cookieManager([out, retval] LPDISPATCH* ppRet);

    HRESULT createTab([in] LPDISPATCH aProperties, [in] LPDISPATCH aCreator, [in] LPDISPATCH aCallback);
    HRESULT updateTab([in] INT aTabId, [in] LPDISPATCH aProperties);
    HRESULT getTabInfo([in] INT aTabId, [in] LPDISPATCH aCreator, [out, retval] VARIANT* aRet);
    HRESULT removeTabs([in] LPDISPATCH aTabs, [in] LPDISPATCH aCallback);
    HRESULT queryTabs([in] LPDISPATCH aQueryInfo, [in] LPDISPATCH aCreator, [out, retval] VARIANT* aRet);

    HRESULT executeScript([in] BSTR aExtensionId, [in] INT aTabID, [in] BSTR aCode, [in] BOOL aFileSpecified, [in] BOOL aInAllFrames);
    HRESULT invokeExternalEventObject([in] BSTR aExtensionId, [in] BSTR aEventName, [in] LPDISPATCH aArgs, [out, retval] VARIANT* aRet);
  };

  /*==========================================================================*/
  [
    object,
    uuid(0F317CA8-BB88-4141-906F-257DA0603639),
    dual,
    nonextensible,
    pointer_default(unique)
  ]
  interface IIECookie : IDispatch{
    [id(1), propget, helpstring("property name")] 
    HRESULT name([out, retval] BSTR * pbsRet);

    [id(2), propget, helpstring("property value")] 
    HRESULT value([out, retval] BSTR * pbsRet);

    [id(3), propget, helpstring("property domain")] 
    HRESULT domain([out, retval] BSTR * pbsRet);

    [id(4), propget, helpstring("property path")] 
    HRESULT path([out, retval] BSTR * pbsRet);

    [id(5), propget, helpstring("property expirationDate")] 
    HRESULT expirationDate([out, retval] VARIANT * aRet);
  };

  [
    object,
    uuid(5DB362D1-77BF-49CA-AA1C-9AAA5AA6320F),
    dual,
    nonextensible,
    pointer_default(unique)
  ]
  interface IIECookieManager : IDispatch{
    [id(1), helpstring("enumCookies")] 
    HRESULT enumCookies([in] LPDISPATCH pCallback);
    
    [id(2), helpstring("removeCookie")] 
    HRESULT removeCookie([in] BSTR aUrl, [in] BSTR aName);

    [id(3), helpstring("setCookie")] 
    HRESULT setCookie([in] BSTR aUrl, [in] BSTR aName, [in] BSTR aData);

    [id(4), helpstring("getCookie")] 
    HRESULT getCookie([in] BSTR aUrl, [in] BSTR aName, [out, retval] VARIANT * aRet);
  };


/*==========================================================================*/
  [
	  object,
	  uuid(C501AEAC-8839-4EB5-956A-1826EE6B2FF7),
	  dual,
	  nonextensible,
	  helpstring("IAnchoBackgroundAPI Interface"),
	  pointer_default(unique)
  ]
  interface IAnchoBackgroundAPI : IDispatch
  {
    [propget, id(1), helpstring(
      "Property id. The addon's ID."
    )]
    HRESULT id([out, retval] BSTR * pVal);

    [propget, id(2), helpstring(
      "Property guid. The addon's GUID."
    )]
    HRESULT guid([out, retval] BSTR * pVal);

    [id(100), helpstring(
      "Method startBackgroundWindow. Loads the background window and"
      "runs scripts inside"
    )]
    HRESULT startBackgroundWindow([in] BSTR bsPartialURL);

    HRESULT addEventObject([in]BSTR aEventName, [in] INT aInstanceId, [in] LPDISPATCH aListener);
    HRESULT removeEventObject([in]BSTR aEventName, [in] INT aInstanceId);

    HRESULT invokeEventObject([in] BSTR aEventName, [in] INT aSelectedInstance, [in] BOOL aSkipInstance, [in] LPDISPATCH aArgs, [out, retval] VARIANT* aRet);
    HRESULT invokeEventWithIDispatchArgument([in] BSTR aEventName, [in] LPDISPATCH aArg);
    HRESULT setIDispatchEventInvocationHandler([in] LPDISPATCH aFunction);
    HRESULT callFunction([in] LPDISPATCH aFunction, [in] LPDISPATCH aArgs, [out, retval] VARIANT* aRet);
  };

/*==========================================================================*/
  [
	  helpstring(
      "IAnchoBackgroundConsole interface"
    ),
	  object,
	  uuid(5FF52F47-7CEC-45a9-979F-2F214ACAED1B),
    oleautomation,
    nonextensible,
	  pointer_default(unique)
  ]
  interface IAnchoBackgroundConsole : IUnknown
  {
    [id(1), helpstring(
      "Method log"
    )]
    HRESULT log([in] BSTR bsSource, [in] BSTR bsModuleID, [in] SAFEARRAY(VARIANT) pVals);

    [id(2), helpstring(
      "Method debug"
    )]
    HRESULT debug([in] BSTR bsSource, [in] BSTR bsModuleID, [in] SAFEARRAY(VARIANT) pVals);

    [id(3), helpstring(
      "Method info"
    )]
    HRESULT info([in] BSTR bsSource, [in] BSTR bsModuleID, [in] SAFEARRAY(VARIANT) pVals);

    [id(4), helpstring(
      "Method warn"
    )]
    HRESULT warn([in] BSTR bsSource, [in] BSTR bsModuleID, [in] SAFEARRAY(VARIANT) pVals);

    [id(5), helpstring(
      "Method error"
    )]
    HRESULT error([in] BSTR bsSource, [in] BSTR bsModuleID, [in] SAFEARRAY(VARIANT) pVals);
  };

/*==========================================================================*/
  [
		uuid(2620B92E-09AC-4C35-8164-0BDF33951278),
		helpstring("AnchoAddonService Class")
	]
	coclass AnchoAddonService
	{
		[default] interface IAnchoAddonService;
	};

/*==========================================================================*/
  [
		uuid(EAFE9780-A951-4282-9C8A-39672B406357),
		helpstring("AnchoAddonBackground Class")
	]
	coclass AnchoAddonBackground
	{
		[default] interface IAnchoAddonBackground;
	};

  [
    uuid(91B40A1B-C72A-4887-8C63-036D0649CDDA)
  ]
  coclass IECookie
  {
    [default] interface IIECookie;
  };
  [
    uuid(DE9A7F77-BBCC-4B18-BF38-F9C90262BB6F)
  ]
  coclass IECookieManager
  {
    [default] interface IIECookieManager;
  };
};
